# Grammar of Grammar
# 参考 /doc/grammar文法介绍.md 了解使用方法

lang: grammar

import "./json.grammar"

LEAD = /->/
LT = /</
GT = />/
UNION = /\|/
DEFINE = /=/
IGNORE = /\?/
AT = /@/
SEMICOLON = /;/
COLON = /:/
COMMA = /,/
DOT = /\./
UNFOLD = /\.\.\./
LBRACE = /{/
RBRACE = /}/
EMPTY = /%empty/
LANG<keyword> = /lang/
IMPORT<keyword> = /import/
AS<keyword> = /as/
STRING<json> = /\"([^\"\n\\]|\\[^\n])*\"/ { tokenize: { "type": "string" } }
ID = /[a-zA-Z_]\w*/
REGEX = /\/([^\\\/]|\\[^\n])+\// { tokenize: { "type": "regexp" } }
COMMENT ?= /#[^\n]*\n/ { tokenize: { "type": "comment" } }
SPACE ?= /\s+/

grammar -> ...lang ...imports? ...terms? ...ntrms?;

lang -> LANG COLON ID@lang;

imports -> ...imports? import@imports;

import -> IMPORT STRING@from
  | IMPORT STRING@from AS ID@alias;

terms -> ...terms? term@terms
    | ...terms annotation@annotations;

term -> ID@name ...contexts? IGNORE?@ignore DEFINE REGEX@regex ...annotation_body? {
  name.tokenize: { "type": "class", "modifier": ["definition"] }
};

contexts -> LT ...context_list GT;

context_list -> ID@contexts
    | ...context_list COMMA ID@contexts;

context_list {
  contexts.tokenize: { "type": "decorator", "modifier": ["definition"] }
}

ntrms -> ...ntrms? ntrm@ntrms
    | ...ntrms annotation@annotations;

ntrm -> ID@name  LEAD ...formula_group SEMICOLON
    | ID@name DOT ID@form LEAD ...formula_group SEMICOLON;

ntrm {
  name.tokenize: { "type": "class", "modifier": ["definition"] },
  form.tokenize: { "type": "decorator", "modifier": ["definition"] }
}

annotation -> ...selectors ...annotation_body SEMICOLON?;
selectors -> selector@selectors
    | ...selectors COMMA selector@selectors;
selector -> ID@symbol
    | ID@symbol DOT ID@form;

selector {
  symbol.tokenize: { "type": "class" },
  form.tokenize: { "type": "decorator" }
}

formula_group -> formula@formulas
    | empty_formula@formulas
    | ...formula_group UNION formula@formulas
    | ...formula_group UNION empty_formula@formulas;

formula -> ...formula_body ...annotation_body?;
formula_body -> ...formula_body? symbol@symbols;

empty_formula -> EMPTY@empty;

symbol -> ID@name IGNORE?@optional
    | ID@name IGNORE?@optional AT ID@attr
    | UNFOLD@attr ID@name IGNORE?@optional;

symbol {
  name.tokenize: { "type": "string" },
  attr.tokenize: { "type": "property", "modifier": ["definition"] }
}

annotation_body -> LBRACE ...attributes RBRACE;

attributes -> attribute@attributes
    | ...attributes COMMA attribute@attributes;

attribute -> ID@key COLON json@value
    | ID@of DOT ID@key COLON json@value;

attribute {
  key.tokenize: { "type": "property", "modifier": ["modification"] },
  of.tokenize: { "type": "property" }
}