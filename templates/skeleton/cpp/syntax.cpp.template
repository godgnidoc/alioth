#include "{{lowercase(lang)}}/syntax.h"

#include "alioth/parser.h"
#include "nlohmann/json.hpp"

namespace {{lowercase(lang)}} {

alioth::Syntax SyntaxOf();
alioth::ASTAttr ParseArbitraryAttribute(alioth::AST node);

{{ for s, name in skeleton -}}
{{ if s.forms -}}
{{ for f, fname in s.forms -}}
std::shared_ptr<{{ camelcase(name) }}Node> Parse{{ camelcase(fname) }}{{ camelcase(name) }}(alioth::ASTNtrm node) {
  auto n = std::make_shared<{{ camelcase(name) }}Node::{{camelcase(fname)}}>(*node);

  {{ if f.attributes -}}
  {{ call "parse_attributes.template" with f.attributes }}
  {{- end if }}

  return n;
}
{{ end for }}
{{ end if }}
std::shared_ptr<{{ camelcase(name) }}Node> Parse{{ camelcase(name) }}(alioth::ASTNtrm node) {
  {{ if s.forms -}}{{ -- 产生式有句型分组 }}
  std::shared_ptr<{{ camelcase(name) }}Node> n;
  switch(node->OriginFormula()) {
    {{--}}{{ for f, fname in s.forms -}}
    {{--  }}{{for formula in f.formulas }}case {{formula}}: {{end for}}
    {{--  }}  n = Parse{{camelcase(fname)}}{{ camelcase(name) }}(node);
    {{--  }}  break;
    {{--}}{{ end for }}
    default:
     throw std::runtime_error("unexpected formula");
  }
  {{ else if s.attributes -}}{{ -- 产生式没有句型分组 }}
  auto n = std::make_shared<{{ camelcase(name) }}Node>(*node);
  {{ call "parse_attributes.template" with s.attributes }}
  {{- end if }}{{
  -----------------
  }}{{ if s.common_attributes -}}
  {{ call "parse_attributes.template" with s.common_attributes }}
  {{- end if }}
  return n;
}
{{ end for }}

alioth::ASTAttr ParseArbitraryAttribute(alioth::AST node) {
  if(node) switch(node->id) {
    {{ for s, name in skeleton -}}
    case {{s.id}}: return Parse{{ camelcase(name) }}(node->AsNtrm());
    {{ end for }}
    default: break;
  }

  return node;
}

std::shared_ptr<{{ camelcase(lang) }}Node> Parse{{ camelcase(lang) }}(alioth::Doc source) {
  auto syntax = SyntaxOf();
  auto parser = alioth::Parser(syntax, source);
  auto root = parser.Parse();
  auto {{ lang }} = Parse{{ camelcase(lang) }}(AsNtrm(root->Attr("{{ lang }}")));
  {{ lang }}->root = root;
  return {{ lang }};
}

alioth::Syntax SyntaxOf() {
  static uint8_t binary[] = {
    {{ for@bytes byte in syntax.binary -}}
    {{ if nonfirst@bytes }}, {{ end if }}{{ byte }}
    {{- end for }}
  };

  static auto json = nlohmann::json::from_cbor(binary, binary + sizeof(binary));
  static auto syntax = alioth::LoadSyntax(json);

  return syntax;
}

}