/**
 * @note This parser header file is generated from a template.
 * Any modifications to this file will be overwritten.
 * Please do not edit this file directly.
 *
 * @note 此文件是从模板生成的。
 * 任何对该文件的修改都将被覆盖。
 * 请不要直接编辑此文件。
 */

#ifndef __{{uppercase(lang)}}_SYNTAX_H__
#define __{{uppercase(lang)}}_SYNTAX_H__

#include "alioth/ast.h"

namespace {{lowercase(lang)}} {

{{ for@terms term, id in syntax.lex.terms -}}{{ if nonfirst@terms }}
constexpr alioth::SymbolID {{ term.name }} = {{id}};
{{ end if }}{{ end for }}
{{ for s, name in skeleton -}}
struct {{ camelcase(name) }}; // SymbolID = {{s.id}}; Accepts: {{s.accepts}}
{{ end for }}

{{ for s, name in skeleton -}}
struct {{ camelcase(name) }} {
  {{ if s.forms -}}{{ -- 产生式有句型分组 }}
  {{--}}{{ for f, fname in s.forms -}}
  {{--  }}struct {{camelcase(fname)}};
  {{--}}{{ end for }}
  {{ else if s.attributes -}}{{ -- 产生式没有句型分组 }}
  {{ call "declare_attributes.template" with s.attributes as model }}
  {{- end if }}{{
  -----------------
  }}{{ if s.common_attributes -}}
  {{ call "declare_attributes.template" with s.common_attributes as model }}
  {{- end if }}
  alioth::AST node{};

  operator alioth::AST() const { return node; }
  operator bool() const { return node != nullptr; }
  alioth::ASTNode* operator->() const { return node.get(); }
  alioth::ASTNode& operator*() const { return *node; }
};
{{ if s.forms -}}
{{ for f, fname in s.forms -}}
struct {{ camelcase(name) }}::{{camelcase(fname)}}: public {{ camelcase(name) }} {
  using {{ camelcase(name) }}::{{ camelcase(name) }};

  {{ if f.attributes -}}
  {{ call "declare_attributes.template" with f.attributes as model }}
  {{- end if }}
};
{{ end for }}
{{ end if }}
{{ end for }}
}

namespace alioth {
{{ for s, name in skeleton -}}
template<>
inline {{lowercase(lang)}}::{{ camelcase(name) }} alioth::ASTNode::As<{{lowercase(lang)}}::{{ camelcase(name) }}>() {
  switch(id) {
    {{ for acc in s.accepts -}}
    case {{acc}}:
    {{- end for }}
    return {{lowercase(lang)}}::{{ camelcase(name) }}{shared_from_this()};
  default:
    return {};
  }
}
{{ if s.forms -}}
{{ for f, fname in s.forms -}}
template<>
inline {{lowercase(lang)}}::{{ camelcase(name) }}::{{camelcase(fname)}} alioth::ASTNode::As<{{lowercase(lang)}}::{{ camelcase(name) }}::{{camelcase(fname)}}>() {
  switch(OriginFormula()) {
    {{ for formula in f.formulas -}}
    case {{formula}}:
    {{- end for }}
    return {{lowercase(lang)}}::{{ camelcase(name) }}::{{camelcase(fname)}}{shared_from_this()};
  default:
    return {};
  }
}
{{ end for }}
{{ end if }}
{{ end for }}
}

namespace {{lowercase(lang)}} {

{{ for s, name in skeleton -}}
{{ if s.attributes -}}{{ -- 产生式没有句型分组 }}
{{ call "implement_attributes.template" with s.attributes as model, name as name }}
{{- end if }}{{
-----------------
}}{{ if s.common_attributes -}}
{{ call "implement_attributes.template" with s.common_attributes as model, name as name }}
{{- end if }}
{{ if s.forms -}}
{{ for f, fname in s.forms -}}
{{ if f.attributes -}}
{{ call "implement_attributes.template" with f.attributes as model, name as name, fname as form }}
{{- end if }}
{{ end for }}
{{ end if }}
{{ end for }}

inline {{ camelcase(lang) }} ViewOf(alioth::ASTRoot root) {
  return root->Attr("{{lang}}")->As<{{ camelcase(lang) }}>();
}
{{ call "syntax_of.template" }}

}

#endif